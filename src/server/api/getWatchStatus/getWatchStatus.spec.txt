import { assert } from 'chai';
import 'mocha';
import { getWatchStatus } from 'server/api/getWatchStatus/getWatchStatus';
import { createTestContext, createTestRequest } from 'server/utils/test';
import { MIN_IN_MS } from 'core/calculations/calculations';
import { NO_STORAGE } from 'core/storage/storage';
import { ModelType } from 'core/models/model';

describe('api/getWatchStatus', () => {
  const request = createTestRequest();
  const currentTimestamp = 324234324;

  // Mock objects
  const mockResponseJson = {
    alarms: [
      {
        modelType: 'Alarm',
        timestamp: currentTimestamp,
        situationType: 'PERSISTENT_HIGH',
        isActive: true,
        deactivationTimestamp: null,
        alarmStates: [
          {
            alarmLevel: 1,
            validAfterTimestamp: currentTimestamp - MIN_IN_MS,
            ackedBy: null,
            pushoverReceipts: [],
          },
        ],
      },
    ],
    deviceStatus: {
      modelType: 'DeviceStatus',
      deviceName: 'dexcom',
      timestamp: currentTimestamp,
      batteryLevel: 80,
      geolocation: null,
    },
  };

  const mockAlarms = [
    {
      _id: 'timeline/2015-11-29T20:27:23.000Z/3fd6e5bb-454a-4a6a-bbd7-06b2a467141b',
      _rev: '1-eed3deeff87736cb14db2698675eb0c1',
      modelUuid: '3fd6e5bb-454a-4a6a-bbd7-06b2a467141b',
      modelMeta: {
        modelVersion: 1,
      },
      modelType: 'Alarm',
      timestamp: currentTimestamp,
      situationType: 'PERSISTENT_HIGH',
      isActive: true,
      deactivationTimestamp: null,
      alarmStates: [
        {
          alarmLevel: 1,
          validAfterTimestamp: currentTimestamp - MIN_IN_MS,
          ackedBy: null,
          pushoverReceipts: [],
        },
      ],
    },
  ];
  const mockDeviceStatus = {
    _id: 'timeline/2015-11-29T20:27:23.000Z/3fd6e5bb-454a-4a6a-bbd7-06b2a467141b',
    _rev: '1-eed3deeff87736cb14db2698675eb0c1',
    modelUuid: '3fd6e5bb-454a-4a6a-bbd7-06b2a467141b',
    modelMeta: {
      modelVersion: 1,
    },
    modelType: 'DeviceStatus',
    deviceName: 'dexcom',
    timestamp: currentTimestamp,
    batteryLevel: 80,
    geolocation: null,
  };

  const mockStorage = {
    ...NO_STORAGE,
    loadLatestTimelineModels(modelType: ModelType) {
      if (modelType === 'Alarm') {
        return Promise.resolve(mockAlarms);
      } else if (modelType === 'DeviceStatus') {
        return Promise.resolve(mockDeviceStatus);
      }
    },
  };

  const context = createTestContext(NO_STORAGE, () => currentTimestamp);

  // Assertions
  xit('get watch status with valid alarm', () => {
    return getWatchStatus(request, context).then(res => {
      assert.deepEqual(res.responseBody, mockResponseJson);
    });
  });
});
